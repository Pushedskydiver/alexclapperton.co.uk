---
tags: articles
title: "How to use Grid and Flexbox together"
description: "Ladies and gentlemen and to the snake in my bedroom, I present to you the future of CSS layout and boy is it a game changer."
datePublished: 2018-01-14
dateModified: 2019-02-20
slug: 2018/how-to-use-grid-and-flexbox-together
external: false
home: false
about: false
post: true
changefreq: monthly
priority: 0.8
thumbnail:
  url: //images.ctfassets.net/66vjslfacivy/5G9cSPHCD7ENeFq8PorQph/f4e5a9060878cc16f1563f51d1bcd434/grid-flexbox.jpg
  alt: "laptop screen displaying css code on a text editor."
layout: _layouts/post
---

<p class="post__body">With <a class="link" href="https://alexclapperton.co.uk/blog/working-with-grid-the-holy-grail-of-css-layout/" title="Internal blog post about css grid.">CSS Grid</a> finally shipping and enabled by default on <a class="link" href="http://caniuse.com/#feat=css-grid" title="External link to caniuse website showing which browsers support css grid." rel="external">most modern browsers</a>, developers across the globe will be jumping with joy at how this new layout module finally solves our layout problems.</p>

<p class="post__body">However, with the release of this new layout module I have heard some people asking whether this is now the end for our dear friend <a class="link" href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" title="External link to css tricks blog post about flexbox." rel="external">Flexbox</a>, which has been a lifesaver for many years in trying to make complex layouts a little easier. The short answer to this is no, Flexbox is not dead and in this post, I'm going to illustrate how Flexbox and Grid can work together.</p>

<h2 class="post__heading">CSS Grid vs Flexbox</h2>

<p class="post__body">Before we dive into the illustration we first need to understand the differences between CSS Grid and Flexbox. Flexbox is used to position elements on a single axis, either a column or a row. Grid on the other hand, is intended to position elements across two axes, columns and rows and this is where the differences lie.</p>

<p class="post__body">We now need to decide when its best to use Grid and when its best to use Flexbox when creating our layouts. Rachel Andrew has <a class="link" href="https://rachelandrew.co.uk/archives/2016/03/30/should-i-use-grid-or-flexbox/" title="External link to Rachel Andrew's blog post about when to use grid and flexbox." rel="external">posted a nice article</a> to help us make this decision. Now that we understand the differences, let's get into the illustration.</p>

<h3 class="post__sub-title">What we're going to make</h3>

<p class="post__body">We're going to build a card-like UI, similar to the <a class="link" href="https://www.bbc.co.uk/" title="External link to the BBC website." rel="external">BBC website</a> (check out the full page CodePen for a better idea).</p>

<p data-height="300" data-theme-id="28401" data-slug-hash="gWOEpr" data-default-tab="html,result" data-user="Pushedskydiver" data-pen-title="Card UI Using Grid & FlexBox" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Pushedskydiver/pen/gWOEpr/">Card UI Using Grid & FlexBox</a> by Alex Clapperton (<a href="https://codepen.io/Pushedskydiver">@Pushedskydiver</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<br>

<p class="post__body"><strong>Note:</strong> Make sure you are using a browser that supports Grid.</p>

<h3 class="post__sub-title">Our HTML Markup</h3>

<p class="post__body">Let's start by creating a wrapper for our grid <code class="language-inline">&lt;div class="grid"></code>, some grid items to position everything <code class="language-inline">&lt;div class="grid__item"></code>, and some anchors which will be our cards:</p>

<pre><code class="language-markup">&lt;div class="grid">

    &lt;!-- grid item, containing a card -->
    &lt;div class="grid__item grid__item--1">
      &lt;a class="link" href="" class="card">
        &lt;div class="card__thumbnail">&lt;/div>
        &lt;article class="card__content">
          &lt;h1 class="card__title">Post title&lt;/h1>
          &lt;span class="card__author">Author&lt;/span>
        &lt;/article>
      &lt;/a>
    &lt;/div>

    &lt;!-- grid item, containing a card -->
    &lt;div class="grid__item grid__item--2">
      ...
    &lt;/div>

    &lt;!-- grid item, containing a card -->
    &lt;div class="grid__item  grid__item--3">
      ...
    &lt;/div>

&lt;/div></code></pre>

<p class="post__body">You can create as many cards as you wish; for this post, we are going to use 7. Each card has a thumbnail which will contain a background image later. The we have an article tag which houses our <code class="language-inline">&lt;h1></code>, <code class="language-inline">&lt;span></code> and possibly a <code class="language-inline">&lt;p></code> for more information.</p>

<h3 class="post__sub-title">Styling our grid</h3>

<p class="post__body">Let's start off by creating our grid and arranging the grid items.</p>

<p class="post__body"><strong>Note:</strong> If this is your first time jumping into Grid then I recommend you first check out my post <a class="link" href="/blog/working-with-grid-the-holy-grail-of-css-layout" title="My blog post talking about CSS Grid.">briefly explaining Grid</a>, or for more in depth detail check out the <a class="link" href="https://webdesign.tutsplus.com/series/understanding-css-grid-layout--cms-1079" title="External link to tutsplus guides on CSS Grid." rel="external">guides over on tutsplus</a>.</p>

<p class="post__body">We shall create these cards using a mobile-first approach so our first lot of styles will give our wrapper a width and centre it, then we shall apply some Grid rules:</p>

<pre><code class="language-css">.grid {
  width: 90%;
  max-width: 1240px;
  margin: 0 auto;

  display: grid;

  grid-template-columns: 1fr;
  grid-template-rows: auto;
  grid-gap: 20px;
}</code></pre>

<p class="post__body">Right off the bat we are setting our grid state via <code class="language-inline">display: grid;</code>. We are then defining how many columns to set, by declaring <code class="language-inline">grid-template-columns: 1fr;</code>. This states that each column will take up a single fraction of the space available. We’ve only declared one column for now, so our column will fill the whole width.</p>

<p class="post__body">To define our rows we will state <code class="language-inline">grid-template-rows: auto;</code>. This is actually the default value so we don't really need to include this, but for tutorial purposes we shall stay with. This default value simply means that the height of the rows is determined purely by the content.</p>