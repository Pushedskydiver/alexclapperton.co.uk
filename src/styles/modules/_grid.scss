// Grid - site wide grid configuration

$breakpoints: (
  xs: 400px,
  s: 600px,
  m: 768px,
  l: 992px,
  xl: 1230px
);

@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media (min-width: #{inspect(map-get($breakpoints, $name))}) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin flexbox {
  display: flex;
}

@mixin flex-wrap($value) {
  @if $value == wrap {
    flex-wrap: wrap;
  }
  @if $value == nowrap {
    flex-wrap: nowrap;
  }
}

@mixin flex-direction($value) {
  @if $value == column {
    flex-direction: column;
  }
  @else if $value == row {
    flex-direction: row;
  }
  @else {
    @warn "The value must be either row or column";
  }
}

@mixin justify-content($value) {
  @if $value == space-between {
    justify-content: space-between;
  }
  @if $value == center {
    justify-content: center;
  }
  @if $value == flex-start {
    justify-content: flex-start;
  }
  @if $value == flex-end {
    justify-content: flex-end;
  }
}

@mixin align-items($value) {
  @if $value == center {
    align-items: center;
  }
  @if $value == start {
    align-items: flex-start;
  }
  @if $value == end {
    align-items: flex-end;
  }
}

@mixin grid($wrap, $direction, $justify) {
  @include flexbox;
  @include flex-wrap($wrap);
  @include flex-direction($direction);
  @include justify-content($justify);
}

.grid-guides {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;

  @include respond-to(m) {
    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: -$core-grid-unit;
      width: 1px;
      height: 100%;
      background: $core-color-dark;
      opacity: 0.15;
    }

    &::after {
      content: '';
      position: absolute;
      top: 0;
      right: -$core-grid-unit;
      width: 1px;
      height: 100%;
      background: $core-color-dark;
      opacity: 0.15;
    }
  }
}

.grid-guides__guide {
  position: absolute;
  width: 100%;
  height: 100%;
  min-height: auto;
  z-index: 1;

  &:nth-of-type(1) {

    &::before, &::after {
      content: '';
      position: absolute;
      top: 0;
      width: 1px;
      height: 100%;
      background: $core-color-dark;
      opacity: 0.15;
      z-index: -1;
    }

    &::before {
      left: $core-grid-unit;
    }

    &::after {
      right: $core-grid-unit;
    }
  }

  @include respond-to(m) {
    width: 25%;

    &:nth-of-type(1) {
      left: 0;
    }

    &:nth-of-type(2) {
      left: 25%;
    }

    &:nth-of-type(3) {
      left: 50%;
    }

    &:nth-of-type(4) {
      left: 75%;
    }

    &::before, &::after {
      content: '';
      position: absolute;
      top: 0;
      width: 1px;
      height: 100%;
      background: $core-color-dark;
      opacity: 0.15;
      z-index: -1;
    }

    &::before {
      left: $core-grid-unit;
    }

    &::after {
      right: $core-grid-unit;
    }
  }
}
